{
Main: {
	Define: {
		StepHeight: 0.2,
		StepWidth: 5,
		StoryHeight: 50,
		StepTexture: data/textures/stone/stone10,
		Bannister : "",
		BannisterHeight : 2,
		BannisterOffset : 0.2,
		BannisterSize : 0.1,
		BannisterTexture : data/textures/stone/stone10
	},
	Rule: StepsColumn
},
StepsColumn : {
	TempRulePlatformBot: {
		MultiConditional: {
			"defined(addDoor),defined(Lower)": {
				Occlude: { Z: "150%", Name: Door }
			}
		},
		Snap: { Y: "-1" },
		Y: StepHeight*2,
		Move: { Y: "-StepHeight" },
		Rule: StepShape
	},
	TempRulePlatformTop: {
		Snap: { Y: "1" },
		Y: StepHeight*2,
		Move: { Y: StepHeight },
		Rule: StepShape
	},
	TempRuleFlightLowerSteps : {
		Define : {
			Lower : ""
		},
		DivideZ : [
			"StepWidth, TempRulePlatformBot",
			"Z-StepWidth*2, StepsStraight",
			"StepWidth, TempRulePlatformTop"
		]
	},
	TempRuleFlightHigherSteps : {
		Rotate : x180yz,
		DivideZ : [
			"StepWidth, TempRulePlatformBot",
			"Z-StepWidth*2, StepsStraight",
			"StepWidth, TempRulePlatformTop"
		]
	},
	TempRuleFlightLower : {
		DivideX : [
			"50%, empty",
			"50%, TempRuleFlightLowerSteps"
		]
	},
	TempRuleFlightHigher : {
		DivideX : [
			"50%, TempRuleFlightHigherSteps",
			"50%, empty"
		]
	},
	TempRuleFlight : {
		DivideY : [
			"50%, TempRuleFlightLower",
			"50%, TempRuleFlightHigher"
		]
	},
	RepeatY : {
		Size : StoryHeight,
		Rule : TempRuleFlight
	}
},
StepsSpiral: {
	TempRuleStep: {
		Rotate: { Angle: i*10 },
		Move: { X: "(X-StepWidth-1)/2" },
		Z: StepDepth,
		X: StepWidth+1,
		Rule: Step
	},
	Define: { i: 0, StepNum : 1 },
	RepeatY: {
		Size: StepHeight,
		Rule: TempRuleStep,
		RepeatRule: {
			Define: { i: i+1 }
		}
	},
	Child: {
		X: X-StepWidth*2,
		Z: Z-StepWidth*2,
		Mesh: {
			Name: Cylinder,
			Texture: StepTexture,
			TriplanarScale: 1,
			HollowScale: 0,
			Phi: 32
		}
	}
},
StepsTower: {
	TempRulePlatformBottom: {
		MultiConditional: {
			defined(addDoor): {
				Occlude: { Z: "150%", Name: Door }
			}
		},
		Snap: { Y: "-1" },
		Y: StepHeight*2,
		Move: { Y: "-StepHeight" },
		Rule: StepShape
	},
	TempRulePlatform: {
		MultiConditional: {
			defined(addDoor): {
				Occlude: { Z: "150%", Name: Door }
			}
		},
		Snap: { Y: "1" },
		Y: StepHeight*2,
		Move: { Y: StepHeight },
		Rule: StepShape
	},
	TempRuleSteps: {
		MultiConditional: {
			defined(first): {
				DivideZ: [
					"StepWidth, empty",
					"Z-StepWidth*2, StepsStraight",
					"StepWidth, TempRulePlatform"
				]
			},
			else: {
				DivideZ: [
					"StepWidth, TempRulePlatformBottom",
					"Z-StepWidth*2, StepsStraight",
					"StepWidth, TempRulePlatform"
				],
			}
		}
	},
	TempRuleBack: {
		Select: [ "Back, StepWidth, TempRuleSteps, x-90yz" ]
	},
	TempRuleLeft: {
		Select: [ "Left, StepWidth, TempRuleSteps, xyz" ]
	},
	TempRuleFront: {
		Select: [ "Front, StepWidth, TempRuleSteps, x90yz" ]
	},
	TempRuleRight: {
		Select: [ "Right, StepWidth, TempRuleSteps, x180yz" ]
	},
	TempRuleSelector: {
		MultiConditional: {
			i==3: TempRuleRight,
			i==2: TempRuleFront,
			i==1: TempRuleLeft,
			else: TempRuleBack
		}
	},
	Define: { i: 0 },
	RepeatY: {
		Size: StoryHeight,
		Rule: TempRuleSelector,
		RepeatRule: {
			Define: { i: "mod(i+1, 4)", first:""}
		}
	}
},
StepsStraight: {
	MultiConditional: {
		"defined(StepHeight), defined(StepDepth)": empty,
		defined(StepHeight): {
			Define: { StepDepth: Z/(Y/StepHeight) }
		},
		defined(StepDepth): {
			Define: { StepHeight: Y/(Z/StepDepth) }
		},
		else: {
			Define: { StepDepth: 1, StepHeight: 1 }
		}
	},
	Rule: Steps
},
Steps: {
	Define: { StepNum: 1 },
	RepeatZ: {
		Size: StepDepth,
		Rule: Step,
		RemainderRule: Step,
		RepeatRule: {
			Define: { StepNum: StepNum+1 }
		}
	}
},
Step: {
	DivideY : [
		"(StepNum-2)*StepHeight, empty",
		"StepHeight*2, StepShape",
		"(100%)-StepNum*StepHeight, empty"
	],
	TempRuleBannister : {
		Snap : {
			Y : "-1"
		},
		X : BannisterSize,
		Y : BannisterHeight,
		Z : BannisterSize,
		Move : {
			Y : "(StepNum-2)*StepHeight+StepHeight*2"
		},
		Rule : Bannister
	},
	MultiConditional : {
		"defined(Bannister)" : {
			DivideX : [
				"BannisterOffset, empty",
				"BannisterSize, TempRuleBannister",
				"X-(BannisterOffset*2+BannisterSize*2), empty",
				"BannisterSize, TempRuleBannister",
				"BannisterOffset, empty"
			]
		}
	}
},
StepShape: {
	Mesh: {
		Name: Box,
		Texture: StepTexture,
		TriplanarScale: 1
	}
},
Bannister : {
	Mesh : {
		Name : Box,
		Texture : BannisterTexture,
		TriplanarScale : 1
	}
},
empty: {}
}
